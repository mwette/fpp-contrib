#!/bin/bash
# -*- scheme -*-
FPPDIR=$(dirname $(realpath $0))
GUILE_LOAD_PATH=$FPPDIR:$HOME/repo/sv/nyacc/current
exec guile $0 "$@"
!#
;; Copyright (C) 2025 Matthew Wette
;; SPDX-License-Identifier: Apache-2.0
(use-modules ((srfi srfi-1) #:select (fold fold-right)))
(use-modules (sxml simple))
(use-modules (sxml match))
(use-modules (fpp-parser))
(use-modules (ice-9 pretty-print))
(define pp pretty-print)
(use-modules (nyacc lang sx-util))
(define (sf fmt . args) (apply simple-format #t fmt args))

(define (fail fmt . args)
  (apply simple-format (current-error-port) fmt args)
  (newline (current-error-port))
  (quit 1))

(define (rsl->qid sl)
  (string-join (reverse sl) "."))

(define (locs->dict ltree)
  (map
   (lambda (loc)
     (sxml-match loc
       ((loc-inst (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-comp (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-const (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-port (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-state (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-topo (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))
       ((loc-type (qual-ident ,parts ...) (at (string ,path)))
        (cons (string-join parts ".") (substring path 3)))))
   (cdr ltree)))

(define (coll-inst tree)
  (letrec
      ((probe-form
        (lambda (form scope seed)
          (sxml-match form
            ((seq . ,members)
             (probe-members members scope seed))
            ((trans-unit . ,members)
             (probe-members members scope seed))
            ((module-defn (ident ,name) (seq . ,members))
             (probe-members members (cons name scope) seed))
            ((instance (ident ,name) (qual-ident ,parts ...) . ,_)
             (acons name parts seed))
            (,__ seed))))
       (probe-members
        (lambda (members scope seed)
          (fold (lambda (member seed) (probe-form member scope seed))
                seed members))))
    (reverse (probe-form tree '() '()))))

(define (get-dname tree)
  (sxml-match tree
    ((module-defn (ident ,name) . ,_) name)
    ((trans-unit . ,forms) (fold (lambda (f v) (or v (get-dname f))) #f forms))
    (,_ #f)))

(define (find-chans tree pfix seed)
  (letrec
      ((probe-form
        (lambda (form seed)
          (sxml-match form
            ((trans-unit . ,members) (probe-members members seed))
            ((seq . ,members) (probe-members members seed))
            ((module-defn (ident ,name) (seq . ,members))
             (probe-members members seed))
            ((component-defn (ident ,n) (kind ,k) . ,members)
             (probe-members members seed))
            ((telemetry (ident ,name) . ,_)
             (cons (string-append pfix "." name) seed))
            (,_ seed))))
       (probe-members
        (lambda (members seed)
          (fold (lambda (member seed) (probe-form member seed)) seed members))))
    (reverse (probe-form tree seed))))

(define (inst-chanl dname ilist ldict)
  (fold
   (lambda (item seed)
     (let* ((inst (car item))
            (type (cdr item))
            (locn (assoc-ref ldict type))
            (pfix (string-append dname "." inst))
            (scope '())
            (tree (read-fpp-file locn)))
       (find-chans tree pfix seed)))
   '() ilist))

(define (pkts-chanl ptree)
  (sxml-match ptree
    ((packets (@ (namespace ,ns)) . ,forms)
     (fold (lambda (form seed)
             (sxml-match form
               ((import_topology . ,_0) seed)
               ((packet (@ (name ,nm) (level ,lv) (id ,id)) . ,chans)
                (fold (lambda (form seed)
                        (sxml-match form
                          ((channel (@ (name ,name))) (cons name seed))))
                      seed chans))
               ((ignore (channel (@ (name ,name)))) (cons name seed))))
           '() forms))))

(define (add-rem inst-cl pkts-cl)
  (let ((rem (fold (lambda (chan seed)
                     (if (member chan inst-cl) seed (cons chan seed)))
                   '() pkts-cl))
        (add (fold (lambda (chan seed)
                     (if (member chan pkts-cl) seed (cons chan seed)))
                   '() inst-cl)))
    `((rem . ,(reverse rem)) (add . ,(reverse add)))))


;; --------------------------------------

(use-modules (srfi srfi-37))

(define options
  (list
   (option '("help") #f #f
           (lambda (opt name arg opts)
             (acons 'help #t opts)))
   (option '(#\P "platform") #t #f
           (lambda (opt name arg opts)
             (acons 'platform arg opts)))
   ))

(define (main args)
  (let* ((opts (args-fold
                (cdr args) options
                (lambda (opt name arg opts) (fail "bad opton: ~s" name))
                (lambda (dir opts) (acons 'dpldir dir opts))
                '((platform . "automatic-native"))))
         (dpldir (or (assq-ref opts 'dpldir) (fail "no deployment specified")))
         (blddir (string-append "build-fprime-" (assq-ref opts 'platform)))
         ;;
         (lfile (string-append blddir "/locs.fpp"))
         (ltree (read-fpp-file lfile))
         (ldict (locs->dict ltree))
         (ifile (string-append dpldir "/Top/instances.fpp"))
         (itree (read-fpp-file ifile))
         (dname (get-dname itree))
         (ilist (map (lambda (ent) (cons (car ent) (string-join (cdr ent))))
                     itree))
         (pfile (string-append dpldir "/Top/" dname "Packets.xml"))
         (ptree (cadr (xml->sxml (open-input-file pfile) #:trim-whitespace? #t)))
         (inst-cl (inst-chanl dname ilist ldict))
         (pkts-cl (pkts-chanl ptree))
         (addrem (add-rem inst-cl pkts-cl)))
    ;;(pp ilist)
    ;;(pp inst-cl)
    ;;(pp pkts-cl)
    (pp addrem)
    ;; need to process includes
    #|
    (sf "remove from packets.xlm:\n")
    (for-each (lambda (chan) (sf "  ~a\n" chan)) (assq-ref addrem 'rem))
    (sf "add to packets.xlm:\n")
    (for-each (lambda (chan) (sf "  ~a\n" chan)) (assq-ref addrem 'add))
    |#
    #f))

(main (program-arguments))

;; --- last line ---

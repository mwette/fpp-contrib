#!/bin/bash
# -*- scheme -*-
FPPDIR=$(dirname $(realpath $0))
GUILE_LOAD_PATH=$FPPDIR:$HOME/repo/sv/nyacc/current
exec guile $0 "$@"
!#
(use-modules ((srfi srfi-1) #:select (fold)))
(use-modules (sxml simple))
(use-modules (sxml match))
(use-modules (fpp-parser))
(use-modules (ice-9 pretty-print))
(define pp pretty-print)
(use-modules (nyacc lang sx-util))

(define (rsl->qid sl)
  (string-join (reverse sl) "."))

(define (locs->dict ltree)
  (map (lambda (loc)
         (sxml-match loc
           ((loc-inst (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-comp (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-const (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-port (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-state (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-topo (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))
           ((loc-type (qual-ident ,parts ...) (at (string ,path)))
            (cons (string-join parts ".") path))))
       (cdr ltree)))

(define (coll-inst tree)
  (letrec ((probe-form
            (lambda (form scope seed)
              (sxml-match form
                ((trans-unit . ,members)
                 (probe-members members scope seed))
                ((module-mem-seq . ,members)
                 (probe-members members scope seed))
                ((module-defn (ident ,name) (module-mem-seq . ,members))
                (probe-members members (cons name scope) seed))
                ((module-mem-seq . ,members)
                 (probe-members members scope seed))
                ((instance (ident ,name) (qual-ident ,parts ...) . ,_)
                 (acons name (string-join parts ".") seed))
                (,__ seed))))
           (probe-members
            (lambda (members scope seed)
              (fold (lambda (member seed) (probe-form member scope seed))
                    seed members))))
    (reverse (probe-form tree '() '()))))

(define (get-channels ptree)
  (sxml-match ptree
    ((packets (@ (namespace ,ns)) . ,forms)
     (fold (lambda (form seed)
             (sxml-match form
               ((import_topology . ,_0) seed)
               ((packet (@ (name ,nm) (level ,lv) (id ,id)) . ,chans)
                (fold (lambda (form seed)
                        (sxml-match form
                          ((channel (@ (name ,name))) (cons name seed))))
                      seed chans))
               ((ignore (channel (@ (name ,name)))) (cons name seed))))
           '() forms))))

;; assume executed from dpl-dir
(define (main args)
  (let* ((lfile (string-append (list-ref args 1) "/locs.fpp"))
         (ltree (read-fpp-file lfile))
         (ldict (locs->dict ltree))
         (ifile "instances.fpp")
         (itree (read-fpp-file ifile))
         (ilist (coll-inst itree))
         (pfile (list-ref args 2))
         (ptree (cadr (xml->sxml (open-input-file pfile) #:trim-whitespace? #t)))
         (chans (get-channels ptree))
         )
    ;;(pp ldict)
    (pp ilist)
    (pp chans)
    ))

(main (program-arguments))

;; --- last line ---
